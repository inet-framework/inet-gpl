#Hierarchical Link Sharing Implementation for OMNeT++ and INET Framework
#
#SPDX-License-Identifier: GPL-2.0-or-later
#
#Author: Atacan Iyidogan
#Advised by: Marcin Bosk, Filip Rezabek
#
#This implementation is based on:
#1. HTB Scheduler for INET framework (https://github.com/inet-framework/inet-gpl/blob/master/src/inetgpl/queueing/scheduler/HtbScheduler.cc and other relevant files)
#2. HLS Linux Qdisc implementation (https://github.com/lantua/HLS/blob/main/sch_hls.c)
#3. Publications:
#    - Luangsomboon, N., & Liebeherr, J. (2021). A Round-Robin Packet Scheduler for Hierarchical Max-Min Fairness. arXiv preprint arXiv:2108.09864.
#    - Luangsomboon, N., & Liebeherr, J. (2021, November). HLS: A Packet Scheduler for Hierarchical Fairness. In 2021 IEEE 29th International Conference on Network Protocols (ICNP) (pp. 1-11). IEEE.

[General]
sim-time-limit=25s
num-rngs = 1
seed-0-mt = 5
output-scalar-file-append = false
record-eventlog = false
#abstract-config = true (requires omnet 6)

*.visualizer.*.interfaceTableVisualizer.displayInterfaceTables = true

**.tcp.typename = "Tcp"
**.udp.typename = "Udp"

# tcp general settings
**.tcp.advertisedWindow = 65535                      # in bytes, corresponds with the maximal receiver buffer capacity (Note: normally, NIC queues should be at least this size)
**.tcp.delayedAcksEnabled = false                    # delayed ACK algorithm (RFC 1122) enabled/disabled
**.tcp.nagleEnabled = true                           # Nagle's algorithm (RFC 896) enabled/disabled
**.tcp.limitedTransmitEnabled = false                # Limited Transmit algorithm (RFC 3042) enabled/disabled (can be used for TCPReno/TCPTahoe/TCPNewReno/TCPNoCongestionControl)
**.tcp.increasedIWEnabled = false                    # Increased Initial Window (RFC 3390) enabled/disabled
**.tcp.sackSupport = false                           # Selective Acknowledgment (RFC 2018, 2883, 3517) support (header option) (SACK will be enabled for a connection if both endpoints support it)
**.tcp.windowScalingSupport = true                  # Window Scale (RFC 1323) support (header option) (WS will be enabled for a connection if both endpoints support it)
**.tcp.timestampSupport = false                      # Timestamps (RFC 1323) support (header option) (TS will be enabled for a connection if both endpoints support it)
**.tcp.mss = 1452                                    # Maximum Segment Size (RFC 793) (header option)
**.tcp.tcpAlgorithmClass = "TcpReno"                 # TCPReno/TCPTahoe/TCPNewReno/TCPNoCongestionControl/DumbTCP
**.tcp.windowScalingFactor = 10

**.tcp.*.*.vector-recording = true
**.host*.app*.*.vector-recording = true
**.server*.app*.*.vector-recording = true
**.vector-recording = false

[Config Experiment1]
description = "Experiment 1 on HLS paper"
network = hlsExperimentPaper
sim-time-limit=25s

output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

#*.scheduler.eth[1].queue.scheduler**.vector-recording = true

**.app*.*.vector-recording = true

# speed of links
**.ethLink1.datarate = 100Mbps
**.ethLink1.delay = 1ms
**.ethLink2.datarate = 10Mbps
**.ethLink2.delay = 1ms

*.trafficGenerator.numApps = 7
*.trafficGenerator.hasUdp = true
*.trafficGenerator.app[*].destAddresses = "trafficSink"
*.trafficGenerator.app[*].messageLength = 1000B
*.trafficGenerator.app[*].sendInterval = 0.8ms
*.trafficGenerator.app[*].packetName = "UDPData"
*.trafficGenerator.app[*].typename = "UdpBasicApp"
*.trafficGenerator.app[*].localAddress = "" # local address; may be left empty ("")
*.trafficGenerator.app[*].localPort = -1 # localPort number to listen on
*.trafficGenerator.app[*].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.trafficGenerator.app[*].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation


# A1 1st
*.trafficGenerator.app[0].startTime = 0s # time first session begins
*.trafficGenerator.app[0].stopTime = 11s # time of finishing sending, negative values mean forever
*.trafficGenerator.app[0].destPort = 1042
# A2 1st
*.trafficGenerator.app[1].startTime = 0s # time first session begins
*.trafficGenerator.app[1].stopTime = 19s # time of finishing sending, negative values mean forever
*.trafficGenerator.app[1].destPort = 1043
# B1 1st
*.trafficGenerator.app[2].startTime = 0s # time first session begins
*.trafficGenerator.app[2].stopTime = 4s # time of finishing sending, negative values mean forever
*.trafficGenerator.app[2].destPort = 1044
# B2
*.trafficGenerator.app[3].startTime = 0s # time first session begins
*.trafficGenerator.app[3].stopTime = -1s # time of finishing sending, negative values mean forever
*.trafficGenerator.app[3].destPort = 1045
# A1 2nd
*.trafficGenerator.app[4].startTime = 14s # time first session begins
*.trafficGenerator.app[4].stopTime = -1s # time of finishing sending, negative values mean forever
*.trafficGenerator.app[4].destPort = 1042
# A2 2nd
*.trafficGenerator.app[5].startTime = 22s # time first session begins
*.trafficGenerator.app[5].stopTime = -1s # time of finishing sending, negative values mean forever
*.trafficGenerator.app[5].destPort = 1043
# B1 2nd
*.trafficGenerator.app[6].startTime = 7s # time first session begins
*.trafficGenerator.app[6].stopTime = -1s # time of finishing sending, negative values mean forever
*.trafficGenerator.app[6].destPort = 1044



*.scheduler.eth[1].queue.typename = "HlsQueue"
*.scheduler.eth[1].queue.numQueues = 4
*.scheduler.eth[1].queue.queue[*].typename = "DropTailQueue"
*.scheduler.eth[1].queue.hlsTreeConfig = xmldoc("experiment1.xml")
*.scheduler.eth[1].queue.queue[*].packetCapacity = 100
*.scheduler.eth[1].queue.classifier.defaultGateIndex = 1
*.scheduler.eth[1].queue.classifier.packetFilters = [expr(has(udp) && udp.destPort == 1042), expr(has(udp) && udp.destPort == 1043), expr(has(udp) && udp.destPort == 1044), expr(has(udp) && udp.destPort == 1045)]
*.scheduler.forwarding = true

*.trafficSink.numApps = 4
*.trafficSink.hasUdp = true
*.trafficSink.app[*].typename = "UdpSink"
*.trafficSink.app[*].localAddress = "" # local address; may be left empty ("")
*.trafficSink.app[*].localPort = 1042 + index # localPort number to listen on
*.trafficSink.app[*].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.trafficSink.app[*].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation

*.trafficSink.app[*].startTime = 0s # time first session begins
*.trafficSink.app[*].stopTime = -1s # time of finishing sending, negative values mean forever

[Config Experiment2L]
description = "Experiment 2 L Scenario on HLS paper"
network = hlsExperimentPaper
sim-time-limit=25s

output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.app*.*.vector-recording = true

# speed of links
**.ethLink1.datarate = 100Mbps
**.ethLink1.delay = 1ms
**.ethLink2.datarate = 10Mbps
**.ethLink2.delay = 1ms


*.trafficGenerator.numApps = 4
*.trafficGenerator.hasUdp = true
*.trafficGenerator.app[*].destAddresses = "trafficSink"
*.trafficGenerator.app[*].messageLength = 1000B
*.trafficGenerator.app[*].sendInterval = 0.8ms
*.trafficGenerator.app[*].packetName = "UDPData"
*.trafficGenerator.app[*].typename = "UdpBasicApp"
*.trafficGenerator.app[*].localAddress = "" # local address; may be left empty ("")
*.trafficGenerator.app[*].localPort = -1 # localPort number to listen on
*.trafficGenerator.app[*].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.trafficGenerator.app[*].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation


# A1
*.trafficGenerator.app[0].startTime = 0s # time first session begins
*.trafficGenerator.app[0].stopTime = -1s # time of finishing sending, negative values mean forever
*.trafficGenerator.app[0].destPort = 1042
# B2 
*.trafficGenerator.app[1].startTime = 0s # time first session begins
*.trafficGenerator.app[1].stopTime = -1s # time of finishing sending, negative values mean forever
*.trafficGenerator.app[1].destPort = 1045
# C 1st
*.trafficGenerator.app[2].startTime = 0s # time first session begins
*.trafficGenerator.app[2].stopTime = 10s # time of finishing sending, negative values mean forever
*.trafficGenerator.app[2].destPort = 1046
# C 2nd
*.trafficGenerator.app[3].startTime = 20s # time first session begins
*.trafficGenerator.app[3].stopTime = -1s # time of finishing sending, negative values mean forever
*.trafficGenerator.app[3].destPort = 1046



*.scheduler.eth[1].queue.typename = "HlsQueue"
*.scheduler.eth[1].queue.numQueues = 5
*.scheduler.eth[1].queue.queue[*].typename = "DropTailQueue"
*.scheduler.eth[1].queue.hlsTreeConfig = xmldoc("experiment2L.xml")
*.scheduler.eth[1].queue.queue[*].packetCapacity = 100
*.scheduler.eth[1].queue.classifier.defaultGateIndex = 1
*.scheduler.eth[1].queue.classifier.packetFilters = [expr(has(udp) && udp.destPort == 1042), expr(has(udp) && udp.destPort == 1043), expr(has(udp) && udp.destPort == 1044), expr(has(udp) && udp.destPort == 1045), expr(has(udp) && udp.destPort == 1046)]
*.scheduler.forwarding = true

*.trafficSink.numApps = 5
*.trafficSink.hasUdp = true
*.trafficSink.app[*].typename = "UdpSink"
*.trafficSink.app[*].localAddress = "" # local address; may be left empty ("")
*.trafficSink.app[*].localPort = 1042 + index # localPort number to listen on
*.trafficSink.app[*].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.trafficSink.app[*].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation

*.trafficSink.app[*].startTime = 0s # time first session begins
*.trafficSink.app[*].stopTime = -1s # time of finishing sending, negative values mean forever

[Config Experiment3]
description = "Experiment 3 on HLS paper"
network = hlsExperimentPaper
sim-time-limit=25s

output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.app*.*.vector-recording = true
#*.scheduler.eth[1].queue.scheduler**.vector-recording = true

# speed of links
**.ethLink1.datarate = 100Mbps
**.ethLink1.delay = 1ms
**.ethLink2.datarate = 10Mbps
**.ethLink2.delay = 1ms


*.trafficGenerator.numApps = 3
*.trafficGenerator.hasUdp = true
*.trafficGenerator.app[*].destAddresses = "trafficSink"
*.trafficGenerator.app[*].messageLength = 1000B
*.trafficGenerator.app[*].sendInterval = 0.8ms
*.trafficGenerator.app[*].packetName = "UDPData"
*.trafficGenerator.app[*].typename = "UdpBasicBurst"
*.trafficGenerator.app[*].chooseDestAddrMode = "once"
*.trafficGenerator.app[*].localAddress = "" # local address; may be left empty ("")
*.trafficGenerator.app[*].localPort = -1 # localPort number to listen on
*.trafficGenerator.app[*].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.trafficGenerator.app[*].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation

*.trafficGenerator.app[*].startTime = 0s # time first session begins
*.trafficGenerator.app[*].stopTime = -1s # time of finishing sending, negative values mean forever
*.trafficGenerator.app[*].burstDuration = 4s
*.trafficGenerator.app[*].sleepDuration = 0.5s


# A
*.trafficGenerator.app[0].destPort = 1042
# B1 
*.trafficGenerator.app[1].destPort = 1043
# C1
*.trafficGenerator.app[2].destPort = 1045



*.scheduler.eth[1].queue.typename = "HlsQueue"
*.scheduler.eth[1].queue.numQueues = 6
*.scheduler.eth[1].queue.queue[*].typename = "DropTailQueue"
*.scheduler.eth[1].queue.hlsTreeConfig = xmldoc("experiment3.xml")
*.scheduler.eth[1].queue.queue[*].packetCapacity = 100
*.scheduler.eth[1].queue.classifier.defaultGateIndex = 1
*.scheduler.eth[1].queue.classifier.packetFilters = [expr(has(udp) && udp.destPort == 1042), expr(has(udp) && udp.destPort == 1043), expr(has(udp) && udp.destPort == 1044), expr(has(udp) && udp.destPort == 1045), expr(has(udp) && udp.destPort == 1046), expr(has(udp) && udp.destPort == 1047)]
*.scheduler.forwarding = true

*.trafficSink.numApps = 6
*.trafficSink.hasUdp = true
*.trafficSink.app[*].typename = "UdpSink"
*.trafficSink.app[*].localAddress = "" # local address; may be left empty ("")
*.trafficSink.app[*].localPort = 1042 + index # localPort number to listen on
*.trafficSink.app[*].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.trafficSink.app[*].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation

*.trafficSink.app[*].startTime = 0s # time first session begins
*.trafficSink.app[*].stopTime = -1s # time of finishing sending, negative values mean forever
